package virtutils

import (
	"bytes"
	"fmt"
	"mediumkube/common"
	"text/template"

	"github.com/Masterminds/sprig"
)

const domainTmplKvm = `
<domain type='{{.Type}}'>
	<name>{{.Name}}</name>
	<title>{{.Name}} - Generated by MediumKube</title>
	
	<!--Resource Allocation-->
	<vcpu>{{.CPU}}</vcpu>
	<maxMemory unit='{{.MemoryUnit}}'>{{.MemoryMagnitude}}</maxMemory>
	<memory unit='{{.MemoryUnit}}'>{{.MemoryMagnitude}}</memory>
	<currentMemory unit='{{.MemoryUnit}}'>{{.CurrentMemory}}</currentMemory>

	<devices>
		<!-- System disk -->
		<disk type='file' device='disk'> 
			<source file='{{.OSImage}}' />
		</disk>

		<!-- Cloud init disk -->
		<disk type='file' device='cdrom'>
			<source file='{{.CloudInitImage}}' />
		</disk>

		<interface type='bridge'>
			<source bridge='{{.Bridge}}'>
		</interface>
	</devices>

</domain>
`

// GetDeploymentConfig Render a domain deployment config
func GetDeploymentConfig(param common.DomainCreationParam) (string, error) {
	var tmplStr string
	if param.Type == "kvm" {
		tmplStr = domainTmplKvm
	} else {
		return "", fmt.Errorf("VM type not supported")
	}

	tmpl, err := template.New("domain").Funcs(sprig.TxtFuncMap()).Parse(tmplStr)
	if err != nil {
		return "", fmt.Errorf("Unable to generate template")
	}
	buffer := bytes.NewBuffer(make([]byte, 0))
	err = tmpl.Execute(buffer, param)
	if err != nil {
		return "", err
	}

	return buffer.String(), nil
}
